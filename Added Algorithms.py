class Node:
    def __init__(self, value):
        self.value = value
        self.right = None
        self.left = None
        self.parent = None


class BST(Node):
    def __init__(self):
        self.root = None
        self.array = []
    # this function take a value, convert it into node and then insert it in the binary tree

    def insertNode(self, value):
        item = Node(value)
        if self.root == None:
            self.root = Node(item.value)
        else:
            current = self.root
            while True:
                if item.value[1] > current.value[1]:
                    if current.right == None:
                        current.right = Node(item.value)
                        current.right.parent = current
                        break
                    else:
                        current = current.right
                elif item.value[1] < current.value[1]:
                    if current.left == None:
                        current.left = Node(item.value)
                        current.left.parent = current
                        break
                    else:
                        current = current.left
    # this function finds the minimum value of the tree

    def visit(self, node):
        try:
            if node.value != None:
                #print("Node: " + str(node.value))
                self.array.append(node.value)
        except:
            print("Node: None")
    # this is a recursive function for inorder traversal

    def inorder(self, root):
        try:
            if root.left != None:
                self.inorder(root.left)
            self.visit(root)
            if root.right != None:
                self.inorder(root.right)
        except:
            return

    def getSorted(self, array):
        tree = BST()
        for i in range(len(array)):
            tree.insertNode(array[i])
        tree.inorder(tree.root)
        return self.array

    def fill_array(self, Node):
        if Node != None:
            if (Node.left != None):
                pos = self.fill_array(Node.left)

            global BST_array
            BST_array.append(Node.value)

            if (Node.right != None):
                pos = self.fill_array(Node.right)

    def To_Array(self, Node):
        global BST_array
        BST_array = []
        self.fill_array(Node)
        return BST_array


def Shell_sort(array):

    gap = len(array) // 2

    while gap > 0:
        i = 0
        j = gap

        while (j < len(array)):

            if (array[i][1] > array[j][1]):
                array[i], array[j] = array[j], array[i]

            i = i + 1
            j = j + 1

            k = i
            while (k - gap > -1):

                if array[k - gap][1] > array[k][1]:
                    array[k-gap], array[k] = array[k], array[k-gap]

                k = k - 1

        gap = gap // 2

    return array


def cocktail_sort(array):

    swapped = True
    start = 0
    end = len(array) - 1
    while (swapped == True):

        swapped = False

        for i in range(start, end):
            if (array[i][1] > array[i + 1][1]):
                array[i], array[i + 1] = array[i + 1], array[i]
                swapped = True

        if (swapped == False):
            break

        swapped = False

        end = end-1

        for i in range(end-1, start-1, -1):
            if (array[i][1] > array[i + 1][1]):
                array[i], array[i + 1] = array[i + 1], array[i]
                swapped = True

        start = start + 1

    return array


bt = BST()
array = [[[2355], [459]]
[[2356], [267]]
[[2357], [500]]
[[2358], [712]]
[[2359], [745]]
[[2360], [799]]
[[2361], [289]]
[[2362], [1459]]
[[2363], [610]]
[[2364], [1010]]
[[2365], [430]]
[[2366], [290]]
[[2367], [399]]
[[2368], [459]]
[[2369], [642]]
[[2370], [320]]
[[2371], [690]]
[[2372], [1279]]
[[2373], [774]]
[[2374], [758]]
[[2375], [864]]
[[2376], [589]]
[[2377], [1470]]
[[2378], [314]]
[[2379], [638]]
[[2380], [520]]
[[2381], [879]]
[[2382], [1669]]
[[2383], [799]]
[[2384], [289]]
[[2385], [799]]
[[2386], [566]]
[[2387], [319]]
[[2388], [379]]
[[2389], [380]]
[[2390], [543]]
[[2391], [303]]
[[2392], [858]]
[[2393], [779]]
[[2394], [212]]
[[2395], [871]]
[[2396], [1090]]
[[2397], [330]]
[[2398], [390]]
[[2399], [1499]]
[[2400], [400]]
[[2401], [270]]
[[2402], [729]]
[[2403], [300]]
[[2404], [1130]]
[[2405], [1050]]
[[2406], [1937]]
[[2407], [380]]
[[2408], [170]]
[[2409], [780]]
[[2410], [245]]
[[2411], [700]]
[[2412], [1597]]
[[2413], [500]]
[[2414], [599]]
[[2415], [520]]
[[2416], [700]]
[[2417], [390]]
[[2418], [1279]]
[[2419], [220]]
[[2420], [1580]]
[[2421], [732]]
[[2422], [969]]
[[2423], [695]]
[[2424], [300]]
[[2425], [730]]
[[2426], [798]]
[[2427], [620]]
[[2428], [2279]]
[[2429], [260]]
[[2430], [1000]]
[[2431], [1000]]
[[2432], [685]]
[[2433], [700]]
[[2434], [694]]
[[2435], [2095]]
[[2436], [969]]
[[2437], [419]]
[[2438], [745]]
[[2439], [490]]
[[2440], [978]]
[[2441], [1200]]
[[2442], [1885]]
[[2443], [439]]
[[2444], [215]]
[[2445], [1630]]
[[2446], [439]]
[[2447], [763]]
[[2448], [969]]
[[2449], [394]]
[[2450], [170]]
[[2451], [1050]]
[[2452], [150]]
[[2453], [793]]
[[2454], [630]]
[[2455], [399]]
[[2456], [1175]]
[[2457], [319]]
[[2458], [240]]
[[2459], [780]]
[[2460], [885]]
[[2461], [491]]
[[2462], [198]]
[[2463], [319]]
[[2464], [2269]]
[[2465], [796]]
[[2466], [399]]
[[2467], [1700]]
[[2468], [654]]
[[2469], [569]]
[[2470], [1396]]
[[2471], [697]]
[[2472], [715]]
[[2473], [769]]
[[2474], [788]]
[[2475], [498]]
[[2476], [870]]
[[2477], [830]]
[[2478], [178]]
[[2479], [499]]
[[2480], [1664]]
[[2481], [1909]]
[[2482], [197]]
[[2483], [555]]
[[2484], [571]]
[[2485], [780]]
[[2486], [867]]
[[2487], [359]]
[[2488], [745]]
[[2489], [1275]]
[[2490], [850]]
[[2491], [240]]
[[2492], [210]]
[[2493], [514]]
[[2494], [1600]]
[[2495], [330]]
[[2496], [624]]
[[2497], [499]]
[[2498], [532]]
[[2499], [1636]]
[[2500], [1319]]
[[2501], [568]]
[[2502], [337]]
[[2503], [759]]
[[2504], [609]]
[[2505], [759]]
[[2506], [705]]
[[2507], [649]]
[[2508], [324]]
[[2509], [300]]
[[2510], [705]]
[[2511], [476]]
[[2512], [509]]
[[2513], [649]]
[[2514], [552]]
[[2515], [1279]]
[[2516], [549]]
[[2517], [204]]
[[2518], [3999]]
[[2519], [830]]
[[2520], [1180]]
[[2521], [349]]
[[2522], [535]]
[[2523], [1399]]
[[2524], [1783]]
[[2525], [1037]]
[[2526], [315]]
[[2527], [186]]
[[2528], [190]]
[[2529], [1040]]
[[2530], [655]]
[[2531], [200]]
[[2532], [270]]
[[2533], [279]]
[[2534], [449]]
[[2535], [1100]]
[[2536], [238]]
[[2537], [1100]]
[[2538], [759]]
[[2539], [447]]
[[2540], [1483]]
[[2541], [288]]
[[2542], [1048]]
[[2543], [669]]
[[2544], [400]]
[[2545], [317]]
[[2546], [1379]]
[[2547], [690]]
[[2548], [276]]
[[2549], [259]]
[[2550], [530]]
[[2551], [868]]
[[2552], [1300]]
[[2553], [1799]]
[[2554], [1797]]
[[2555], [580]]
[[2556], [750]]
[[2557], [1080]]
[[2558], [59]]
[[2559], [140]]
[[2560], [330]]
[[2561], [1298]]
[[2562], [500]]
[[2563], [59]]
[[2564], [150]]
[[2565], [1070]]
[[2566], [650]]
[[2567], [73]]
[[2568], [500]]
[[2569], [400]]
[[2570], [848]]
[[2571], [700]]
[[2572], [45]]
[[2573], [300]]
[[2574], [170]]
[[2575], [86]]
[[2576], [15]]
[[2577], [250]]
[[2578], [25]]
[[2579], [2000]]
[[2580], [515]]
[[2581], [233]]
[[2582], [600]]
[[2583], [395]]
[[2584], [475]]
[[2585], [1250]]
[[2586], [215]]
[[2587], [140]]
[[2588], [2498]]
[[2589], [299]]
[[2590], [121]]
[[2591], [180]]
[[2592], [43]]
[[2593], [450]]
[[2594], [999]]
[[2595], [77]]
[[2596], [421]]
[[2597], [351]]
[[2598], [180]]
[[2599], [100]]
[[2600], [250]]
[[2601], [275]]
[[2602], [100]]
[[2603], [345]]
[[2604], [151]]
[[2605], [220]]
[[2606], [60]]
[[2607], [170]]
[[2608], [180]]
[[2609], [99]]
[[2610], [70]]
[[2611], [330]]
[[2612], [299]]
[[2613], [300]]
[[2614], [199]]
[[2615], [229]]
[[2616], [50]]
[[2617], [180]]
[[2618], [180]]
[[2619], [179]]
[[2620], [345]]
[[2621], [180]]
[[2622], [200]]
[[2623], [345]]
[[2624], [49]]
[[2625], [320]]
[[2626], [71]]
[[2627], [70]]
[[2628], [250]]
[[2629], [400]]
[[2630], [49]]
[[2631], [150]]
[[2632], [52]]
[[2633], [180]]
[[2634], [300]]
[[2635], [140]]
[[2636], [250]]
[[2637], [180]]
[[2638], [70]]
[[2639], [100]]
[[2640], [149]]
[[2641], [250]]
[[2642], [50]]
[[2643], [200]]
[[2644], [110]]
[[2645], [219]]
[[2646], [229]]
[[2647], [400]]
[[2648], [147]]
[[2649], [352]]
[[2650], [196]]
[[2651], [197]]
[[2652], [199]]
[[2653], [220]]
[[2654], [200]]
[[2655], [352]]
[[2656], [180]]
[[2657], [150]]
[[2658], [250]]
[[2659], [180]]
[[2660], [35]]
[[2661], [250]]
[[2662], [193]]
[[2663], [400]]
[[2664], [180]]
[[2665], [270]]
[[2666], [400]]
[[2667], [180]]
[[2668], [29]]
[[2669], [100]]
[[2670], [270]]
[[2671], [100]]
[[2672], [400]]
[[2673], [250]]
[[2674], [9]]
[[2675], [195]]
[[2676], [300]]
[[2677], [200]]
[[2678], [270]]
[[2679], [65]]
[[2680], [35]]
[[2681], [179]]
[[2682], [90]]
[[2683], [300]]
[[2684], [35]]
[[2685], [179]]
[[2686], [300]]
[[2687], [400]]
[[2688], [40]]
[[2689], [60]]
[[2690], [35]]
[[2691], [35]]
[[2692], [34]]
[[2693], [35]]
[[2694], [220]]
[[2695], [179]]
[[2696], [294]]
[[2697], [35]]
[[2698], [50]]
[[2699], [154]]
[[2700], [130]]
[[2701], [93]]
[[2702], [35]]
[[2703], [169]]
[[2704], [60]]
[[2705], [200]]
[[2706], [103]]
[[2707], [175]]
[[2708], [184]]
[[2709], [90]]
[[2710], [45]]
[[2711], [45]]
[[2712], [240]]
[[2713], [100]]
[[2714], [93]]
[[2715], [50]]
[[2716], [130]]
[[2717], [124]]
[[2718], [150]]
[[2719], [150]]
[[2720], [220]]
[[2721], [78]]
[[2722], [35]]
[[2723], [153]]
[[2724], [160]]
[[2725], [120]]
[[2726], [100]]
[[2727], [40]]
[[2728], [123]]
[[2729], [240]]
[[2730], [50]]
[[2731], [130]]
[[2732], [60]]
[[2733], [94]]
[[2734], [154]]
[[2735], [130]]
[[2736], [220]]
[[2737], [164]]
[[2738], [110]]
[[2739], [100]]
[[2740], [150]]
[[2741], [136]]
[[2742], [220]]
[[2743], [100]]
[[2744], [90]]
[[2745], [50]]
[[2746], [170]]
[[2747], [136]]
[[2748], [240]]
[[2749], [77]]
[[2750], [96]]
[[2751], [159]]
[[2752], [89]]
[[2753], [43]]
[[2754], [158]]
[[2755], [80]]
[[2756], [78]]
[[2757], [50]]
[[2758], [99]]
[[2759], [180]]
[[2760], [120]]
[[2761], [160]]
[[2762], [130]]
[[2763], [134]]
[[2764], [270]]
[[2765], [120]]
[[2766], [90]]
[[2767], [143]]
[[2768], [80]]
[[2769], [95]]
[[2770], [230]]
[[2771], [86]]
[[2772], [25]]
[[2773], [36]]
[[2774], [25]]
[[2775], [177]]
[[2776], [36]]
[[2777], [66]]
[[2778], [95]]
[[2779], [270]]
[[2780], [189]]
[[2781], [59]]
[[2782], [31]]
[[2783], [23]]
[[2784], [23]]
[[2785], [100]]
[[2786], [95]]
[[2787], [15]]
[[2788], [160]]
[[2789], [39]]
[[2790], [53]]
[[2791], [47]]
[[2792], [13]]
[[2793], [10]]
[[2794], [31]]
[[2795], [14]]
[[2796], [34]]
[[2797], [12]]
[[2798], [13]]
[[2799], [300]]
[[2800], [80]]
[[2801], [16]]
[[2802], [16]]
[[2803], [46]]
[[2804], [29]]
[[2805], [6]]
[[2806], [50]]
[[2807], [44]]
[[2808], [15]]
[[2809], [60]]
[[2810], [20]]
[[2811], [14]]
[[2812], [65]]
[[2813], [20]]
[[2814], [120]]
[[2815], [60]]
[[2816], [47]]
[[2817], [76]]
[[2818], [10]]
[[2819], [7]]
[[2820], [95]]
[[2821], [111]]
[[2822], [16]]
[[2823], [50]]
[[2824], [34]]
[[2825], [79]]
[[2826], [22]]
[[2827], [16]]
[[2828], [25]]
[[2829], [20]]
[[2830], [60]]
[[2831], [201]]
[[2832], [9]]
[[2833], [14]]
[[2834], [65]]
[[2835], [50]]
[[2836], [33]]
[[2837], [71]]
[[2838], [17]]
[[2839], [70]]
[[2840], [70]]
[[2841], [45]]
[[2842], [35]]
[[2843], [23]]
[[2844], [16]]
[[2845], [70]]
[[2846], [45]]
[[2847], [23]]
[[2848], [70]]
[[2849], [82]]
[[2850], [20]]
[[2851], [73]]
[[2852], [30]]
[[2853], [14]]
[[2854], [90]]
[[2855], [70]]
[[2856], [130]]
[[2857], [50]]
[[2858], [30]]
[[2859], [25]]
[[2860], [70]]
[[2861], [55]]
[[2862], [70]]
[[2863], [70]]
[[2864], [90]]
[[2865], [44]]
[[2866], [13]]
[[2867], [60]]
[[2868], [50]]
[[2869], [60]]
[[2870], [60]]
[[2871], [110]]
[[2872], [32]]
[[2873], [128]]
[[2874], [49]]
[[2875], [117]]
[[2876], [130]]
[[2877], [150]]
[[2878], [16]]
[[2879], [30]]
[[2880], [103]]
[[2881], [50]]
[[2882], [40]]
[[2883], [23]]
[[2884], [53]]
[[2885], [40]]
[[2886], [25]]
[[2887], [28]]
[[2888], [50]]
[[2889], [60]]
[[2890], [80]]
[[2891], [20]]
[[2892], [50]]
[[2893], [50]]
[[2894], [23]]
[[2895], [180]]
[[2896], [40]]
[[2897], [36]]
[[2898], [60]]
[[2899], [60]]
[[2900], [50]]
[[2901], [37]]
[[2902], [20]]
[[2903], [30]]
[[2904], [45]]
[[2905], [18]]
[[2906], [50]]
[[2907], [39]]
[[2908], [60]]
[[2909], [60]]
[[2910], [80]]
[[2911], [40]]
[[2912], [50]]
[[2913], [95]]
[[2914], [80]]
[[2915], [150]]
[[2916], [100]]
[[2917], [154]]
[[2918], [15]]
[[2919], [7]]
[[2920], [54]]
[[2921], [80]]
[[2922], [23]]
[[2923], [128]]
[[2924], [45]]
[[2925], [80]]
[[2926], [160]]
[[2927], [80]]
[[2928], [70]]
[[2929], [50]]
[[2930], [97]]
[[2931], [48]]
[[2932], [80]]
[[2933], [80]]
[[2934], [70]]
[[2935], [60]]
[[2936], [50]]
[[2937], [73]]
[[2938], [180]]
[[2939], [199]]
[[2940], [80]]
[[2941], [80]]
[[2942], [100]]
[[2943], [80]]
[[2944], [138]]
[[2945], [53]]
[[2946], [25]]
[[2947], [19]]
[[2948], [19]]
[[2949], [37]]
[[2950], [248]]
[[2951], [130]]
[[2952], [50]]
[[2953], [80]]
[[2954], [16]]
[[2955], [120]]
[[2956], [60]]
[[2957], [13]]
[[2958], [57]]
[[2959], [48]]
[[2960], [40]]
[[2961], [32]]
[[2962], [14]]
[[2963], [10]]
[[2964], [8]]
[[2965], [60]]
[[2966], [60]]
[[2967], [112]]
[[2968], [40]]
[[2969], [57]]
[[2970], [30]]
[[2971], [70]]
[[2972], [49]]
[[2973], [105]]
[[2974], [18]]
[[2975], [77]]
[[2976], [70]]
[[2977], [235]]
[[2978], [23]]
[[2979], [30]]
[[2980], [15]]
[[2981], [328]]
[[2982], [422]]
[[2983], [60]]
[[2984], [32]]
[[2985], [21]]
[[2986], [87]]
[[2987], [100]]
[[2988], [85]]
[[2989], [25]]
[[2990], [20]]
[[2991], [147]]
[[2992], [30]]
[[2993], [80]]
[[2994], [30]]
[[2995], [86]]
[[2996], [88]]
[[2997], [16]]
[[2998], [30]]
[[2999], [60]]
[[3000], [194]]
[[3001], [220]]
[[3002], [30]]
[[3003], [132]]
[[3004], [18]]
[[3005], [48]]
[[3006], [21]]
[[3007], [249]]
[[3008], [72]]
[[3009], [25]]
[[3010], [30]]
[[3011], [9]]
[[3012], [80]]
[[3013], [55]]
[[3014], [43]]
[[3015], [8]]
[[3016], [35]]
[[3017], [90]]
[[3018], [105]]
[[3019], [170]]
[[3020], [26]]
[[3021], [29]]
[[3022], [509]]
[[3023], [30]]
[[3024], [20]]
[[3025], [50]]
[[3026], [28]]
[[3027], [8]]
[[3028], [85]]
[[3029], [9]]
[[3030], [36]]
[[3031], [12]]
[[3032], [41]]
[[3033], [5]]
[[3034], [28]]
[[3035], [4]]
[[3036], [190]]
[[3037], [13]]
[[3038], [22]]
[[3039], [11]]
[[3040], [10]]
[[3041], [250]]
[[3042], [149]]
[[3043], [118]]
[[3044], [180]]
[[3045], [139]]
[[3046], [139]]
[[3047], [142]]
[[3048], [316]]
[[3049], [160]]
[[3050], [580]]
[[3051], [170]]
[[3052], [280]]
[[3053], [236]]
[[3054], [153]]
[[3055], [150]]
[[3056], [300]]
[[3057], [280]]
[[3058], [280]]
[[3059], [316]]
[[3060], [250]]
[[3061], [175]]
[[3062], [280]]
[[3063], [230]]
[[3064], [300]]
[[3065], [280]]
[[3066], [200]]
[[3067], [250]]
[[3068], [180]]
[[3069], [350]]
[[3070], [1769]]
[[3071], [280]]
[[3072], [280]]
[[3073], [377]]
[[3074], [280]]
[[3075], [180]]
[[3076], [138]]
[[3077], [349]]
[[3078], [170]]
[[3079], [195]]
[[3080], [190]]
[[3081], [188]]
[[3082], [700]]
[[3083], [250]]
[[3084], [280]]
[[3085], [297]]
[[3086], [361]]
[[3087], [550]]
[[3088], [210]]
[[3089], [128]]
[[3090], [200]]
[[3091], [316]]
[[3092], [300]]
[[3093], [377]]
[[3094], [280]]
[[3095], [170]]
[[3096], [650]]
[[3097], [770]]
[[3098], [250]]
[[3099], [280]]
[[3100], [249]]
[[3101], [500]]
[[3102], [377]]
[[3103], [231]]
[[3104], [271]]
[[3105], [170]]
[[3106], [650]]
[[3107], [316]]
[[3108], [300]]
[[3109], [377]]
[[3110], [280]]
[[3111], [160]]
[[3112], [310]]
[[3113], [248]]
[[3114], [181]]
[[3115], [200]]
[[3116], [250]]
[[3117], [280]]
[[3118], [380]]
[[3119], [292]]
[[3120], [229]]
[[3121], [169]]
[[3122], [180]]
[[3123], [185]]
[[3124], [316]]
[[3125], [300]]
[[3126], [377]]
[[3127], [280]]
[[3128], [175]]
[[3129], [400]]
[[3130], [220]]
[[3131], [350]]
[[3132], [197]]
[[3133], [250]]
[[3134], [280]]
[[3135], [290]]
[[3136], [170]]
[[3137], [950]]
[[3138], [270]]
[[3139], [299]]
[[3140], [316]]
[[3141], [300]]
[[3142], [377]]
[[3143], [280]]
[[3144], [299]]
[[3145], [500]]
[[3146], [228]]
[[3147], [450]]
[[3148], [1895]]
[[3149], [250]]
[[3150], [280]]
[[3151], [360]]
[[3152], [240]]
[[3153], [250]]
[[3154], [240]]
[[3155], [160]]
[[3156], [316]]
[[3157], [300]]
[[3158], [377]]
[[3159], [280]]
[[3160], [688]]
[[3161], [180]]
[[3162], [250]]
[[3163], [280]]
[[3164], [985]]
[[3165], [600]]
[[3166], [316]]
[[3167], [540]]
[[3168], [235]]
[[3169], [316]]
[[3170], [300]]
[[3171], [377]]
[[3172], [280]]
[[3173], [170]]
[[3174], [583]]
[[3175], [597]]
[[3176], [350]]
[[3177], [645]]
[[3178], [250]]
[[3179], [280]]
[[3180], [329]]
[[3181], [150]]
[[3182], [500]]
[[3183], [199]]
[[3184], [550]]
[[3185], [899]]
[[3186], [330]]
[[3187], [316]]
[[3188], [300]]
[[3189], [377]]
[[3190], [280]]
[[3191], [799]]
[[3192], [230]]
[[3193], [250]]
[[3194], [280]]
[[3195], [430]]
[[3196], [300]]
[[3197], [260]]
[[3198], [500]]
[[3199], [291]]
[[3200], [316]]
[[3201], [300]]
[[3202], [377]]
[[3203], [260]]
[[3204], [700]]
[[3205], [280]]
[[3206], [250]]
[[3207], [250]]
[[3208], [280]]
[[3209], [979]]
[[3210], [2999]]
[[3211], [279]]
[[3212], [515]]
[[3213], [316]]
[[3214], [300]]
[[3215], [377]]
[[3216], [260]]
[[3217], [621]]
[[3218], [997]]
[[3219], [480]]
[[3220], [363]]
[[3221], [243]]
[[3222], [650]]
[[3223], [250]]
[[3224], [280]]
[[3225], [250]]
[[3226], [273]]
[[3227], [327]]
[[3228], [330]]
[[3229], [398]]
[[3230], [316]]
[[3231], [300]]
[[3232], [377]]
[[3233], [260]]
[[3234], [549]]
[[3235], [350]]
[[3236], [290]]
[[3237], [350]]
[[3238], [250]]
[[3239], [280]]
[[3240], [1600]]
[[3241], [250]]
[[3242], [469]]
[[3243], [660]]
[[3244], [316]]
[[3245], [300]]
[[3246], [377]]
[[3247], [260]]
[[3248], [990]]
[[3249], [1200]]
[[3250], [240]]
[[3251], [813]]
[[3252], [230]]
[[3253], [250]]
[[3254], [280]]
[[3255], [340]]
[[3256], [550]]
[[3257], [309]]
[[3258], [1700]]
[[3259], [600]]
[[3260], [297]]
[[3261], [316]]
[[3262], [300]]
[[3263], [377]]
[[3264], [260]]
[[3265], [170]]
[[3266], [320]]
[[3267], [1999]]
[[3268], [885]]
[[3269], [259]]
[[3270], [250]]
[[3271], [250]]
[[3272], [280]]
[[3273], [472]]
[[3274], [316]]
[[3275], [300]]
[[3276], [377]]
[[3277], [260]]
[[3278], [304]]
[[3279], [230]]
[[3280], [1262]]
[[3281], [310]]
[[3282], [250]]
[[3283], [280]]
[[3284], [380]]
[[3285], [328]]
[[3286], [370]]
[[3287], [469]]
[[3288], [316]]
[[3289], [300]]
[[3290], [377]]
[[3291], [260]]
[[3292], [330]]
[[3293], [200]]
[[3294], [329]]
[[3295], [250]]
[[3296], [280]]
[[3297], [509]]
[[3298], [339]]
[[3299], [619]]
[[3300], [300]]
[[3301], [316]]
[[3302], [300]]
[[3303], [280]]
[[3304], [260]]
[[3305], [250]]
[[3306], [447]]
[[3307], [379]]
[[3308], [250]]
[[3309], [250]]
[[3310], [280]]
[[3311], [448]]
[[3312], [216]]
[[3313], [360]]
[[3314], [550]]
[[3315], [260]]
[[3316], [400]]
[[3317], [316]]
[[3318], [300]]
[[3319], [280]]
[[3320], [260]]
[[3321], [681]]
[[3322], [300]]
[[3323], [180]]
[[3324], [460]]
[[3325], [280]]
[[3326], [580]]
[[3327], [250]]
[[3328], [280]]
[[3329], [300]]
[[3330], [1100]]
[[3331], [399]]
[[3332], [499]]
[[3333], [200]]
[[3334], [316]]
[[3335], [300]]
[[3336], [280]]
[[3337], [260]]
[[3338], [393]]
[[3339], [250]]
[[3340], [280]]
[[3341], [350]]
[[3342], [316]]
[[3343], [300]]
[[3344], [600]]
[[3345], [700]]
[[3346], [500]]
[[3347], [500]]
[[3348], [2498]]
[[3349], [920]]
[[3350], [25]]]
for i in array:
    bt.insertNode(i)
b = bt.To_Array(bt.root)
print(b)
